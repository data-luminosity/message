/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TProtocolFactory.h"
#import "TApplicationError.h"
#import "TProtocolError.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TBaseClient.h"


#import "PrivateAnswer.h"

@implementation PrivateAnswer

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithAnalystId: (SInt64) analystId queryId: (SInt64) queryId privateAnswerBits: (NSData *) privateAnswerBits bitlen: (SInt32) bitlen joinId: (SInt64) joinId versionId: (SInt64) versionId
{
  self = [super init];
  if (self)  {
    _analystId = analystId;
    _analystIdIsSet = YES;
    _queryId = queryId;
    _queryIdIsSet = YES;
    _privateAnswerBits = privateAnswerBits;
    _privateAnswerBitsIsSet = YES;
    _bitlen = bitlen;
    _bitlenIsSet = YES;
    _joinId = joinId;
    _joinIdIsSet = YES;
    _versionId = versionId;
    _versionIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"analystId"])
    {
      _analystId = [decoder decodeInt64ForKey: @"analystId"];
      _analystIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"queryId"])
    {
      _queryId = [decoder decodeInt64ForKey: @"queryId"];
      _queryIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"privateAnswerBits"])
    {
      _privateAnswerBits = [decoder decodeObjectForKey: @"privateAnswerBits"];
      _privateAnswerBitsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"bitlen"])
    {
      _bitlen = [decoder decodeInt32ForKey: @"bitlen"];
      _bitlenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"joinId"])
    {
      _joinId = [decoder decodeInt64ForKey: @"joinId"];
      _joinIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"versionId"])
    {
      _versionId = [decoder decodeInt64ForKey: @"versionId"];
      _versionIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_analystIdIsSet)
  {
    [encoder encodeInt64: _analystId forKey: @"analystId"];
  }
  if (_queryIdIsSet)
  {
    [encoder encodeInt64: _queryId forKey: @"queryId"];
  }
  if (_privateAnswerBitsIsSet)
  {
    [encoder encodeObject: _privateAnswerBits forKey: @"privateAnswerBits"];
  }
  if (_bitlenIsSet)
  {
    [encoder encodeInt32: _bitlen forKey: @"bitlen"];
  }
  if (_joinIdIsSet)
  {
    [encoder encodeInt64: _joinId forKey: @"joinId"];
  }
  if (_versionIdIsSet)
  {
    [encoder encodeInt64: _versionId forKey: @"versionId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _analystIdIsSet ? 2654435761 : 0;
  if (_analystIdIsSet)
  {
    hash = (hash * 31) ^ [@(_analystId) hash];
  }
  hash = (hash * 31) ^ _queryIdIsSet ? 2654435761 : 0;
  if (_queryIdIsSet)
  {
    hash = (hash * 31) ^ [@(_queryId) hash];
  }
  hash = (hash * 31) ^ _privateAnswerBitsIsSet ? 2654435761 : 0;
  if (_privateAnswerBitsIsSet)
  {
    hash = (hash * 31) ^ [_privateAnswerBits hash];
  }
  hash = (hash * 31) ^ _bitlenIsSet ? 2654435761 : 0;
  if (_bitlenIsSet)
  {
    hash = (hash * 31) ^ [@(_bitlen) hash];
  }
  hash = (hash * 31) ^ _joinIdIsSet ? 2654435761 : 0;
  if (_joinIdIsSet)
  {
    hash = (hash * 31) ^ [@(_joinId) hash];
  }
  hash = (hash * 31) ^ _versionIdIsSet ? 2654435761 : 0;
  if (_versionIdIsSet)
  {
    hash = (hash * 31) ^ [@(_versionId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[PrivateAnswer class]]) {
    return NO;
  }
  PrivateAnswer *other = (PrivateAnswer *)anObject;
  if ((_analystIdIsSet != other->_analystIdIsSet) ||
      (_analystIdIsSet && (_analystId != other->_analystId))) {
    return NO;
  }
  if ((_queryIdIsSet != other->_queryIdIsSet) ||
      (_queryIdIsSet && (_queryId != other->_queryId))) {
    return NO;
  }
  if ((_privateAnswerBitsIsSet != other->_privateAnswerBitsIsSet) ||
      (_privateAnswerBitsIsSet && ((_privateAnswerBits || other->_privateAnswerBits) && ![_privateAnswerBits isEqual:other->_privateAnswerBits]))) {
    return NO;
  }
  if ((_bitlenIsSet != other->_bitlenIsSet) ||
      (_bitlenIsSet && (_bitlen != other->_bitlen))) {
    return NO;
  }
  if ((_joinIdIsSet != other->_joinIdIsSet) ||
      (_joinIdIsSet && (_joinId != other->_joinId))) {
    return NO;
  }
  if ((_versionIdIsSet != other->_versionIdIsSet) ||
      (_versionIdIsSet && (_versionId != other->_versionId))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  PrivateAnswer * val = [PrivateAnswer new];
  if (_analystIdIsSet)
  {
    val.analystId = self.analystId;
  }
  if (_queryIdIsSet)
  {
    val.queryId = self.queryId;
  }
  if (_privateAnswerBitsIsSet)
  {
    val.privateAnswerBits = [self.privateAnswerBits copy];
  }
  if (_bitlenIsSet)
  {
    val.bitlen = self.bitlen;
  }
  if (_joinIdIsSet)
  {
    val.joinId = self.joinId;
  }
  if (_versionIdIsSet)
  {
    val.versionId = self.versionId;
  }
  return val;
}

- (void) setAnalystId: (SInt64) analystId {
  _analystId = analystId;
  _analystIdIsSet = YES;
}

- (void) unsetAnalystId {
  _analystIdIsSet = NO;
}

- (void) setQueryId: (SInt64) queryId {
  _queryId = queryId;
  _queryIdIsSet = YES;
}

- (void) unsetQueryId {
  _queryIdIsSet = NO;
}

- (void) setPrivateAnswerBits: (NSData *) privateAnswerBits {
  _privateAnswerBits = privateAnswerBits;
  _privateAnswerBitsIsSet = YES;
}

- (void) unsetPrivateAnswerBits {
  _privateAnswerBits = nil;
  _privateAnswerBitsIsSet = NO;
}

- (void) setBitlen: (SInt32) bitlen {
  _bitlen = bitlen;
  _bitlenIsSet = YES;
}

- (void) unsetBitlen {
  _bitlenIsSet = NO;
}

- (void) setJoinId: (SInt64) joinId {
  _joinId = joinId;
  _joinIdIsSet = YES;
}

- (void) unsetJoinId {
  _joinIdIsSet = NO;
}

- (void) setVersionId: (SInt64) versionId {
  _versionId = versionId;
  _versionIdIsSet = YES;
}

- (void) unsetVersionId {
  _versionIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.analystId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.queryId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.privateAnswerBits = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.bitlen = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.joinId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.versionId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PrivateAnswer" error: __thriftError]) return NO;
  if (_analystIdIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"analystId" type: TTypeI64 fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _analystId error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_queryIdIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"queryId" type: TTypeI64 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _queryId error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_privateAnswerBitsIsSet) {
    if (_privateAnswerBits != nil) {
      if (![outProtocol writeFieldBeginWithName: @"privateAnswerBits" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _privateAnswerBits error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_bitlenIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"bitlen" type: TTypeI32 fieldID: 4 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _bitlen error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_joinIdIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"joinId" type: TTypeI64 fieldID: 5 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _joinId error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_versionIdIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"versionId" type: TTypeI64 fieldID: 6 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _versionId error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PrivateAnswer("];
  [ms appendString: @"analystId:"];
  [ms appendFormat: @"%qi", _analystId];
  [ms appendString: @",queryId:"];
  [ms appendFormat: @"%qi", _queryId];
  [ms appendString: @",privateAnswerBits:"];
  [ms appendFormat: @"\"%@\"", _privateAnswerBits];
  [ms appendString: @",bitlen:"];
  [ms appendFormat: @"%i", (int)_bitlen];
  [ms appendString: @",joinId:"];
  [ms appendFormat: @"%qi", _joinId];
  [ms appendString: @",versionId:"];
  [ms appendFormat: @"%qi", _versionId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

NSString *PrivateAnswerErrorDomain = @"PrivateAnswerErrorDomain";


