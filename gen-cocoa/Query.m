/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TProtocolFactory.h"
#import "TApplicationError.h"
#import "TProtocolError.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TBaseClient.h"


#import "Query.h"

@implementation QueryVector

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRanges: (NSArray<NSString *> *) ranges
{
  self = [super init];
  if (self)  {
    _ranges = [ranges mutableCopy];
    _rangesIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"ranges"])
    {
      _ranges = [decoder decodeObjectForKey: @"ranges"];
      _rangesIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_rangesIsSet)
  {
    [encoder encodeObject: _ranges forKey: @"ranges"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _rangesIsSet ? 2654435761 : 0;
  if (_rangesIsSet)
  {
    hash = (hash * 31) ^ [_ranges hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[QueryVector class]]) {
    return NO;
  }
  QueryVector *other = (QueryVector *)anObject;
  if ((_rangesIsSet != other->_rangesIsSet) ||
      (_rangesIsSet && ((_ranges || other->_ranges) && ![_ranges isEqual:other->_ranges]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  QueryVector * val = [QueryVector new];
  if (_rangesIsSet)
  {
    val.ranges = [self.ranges copy];
  }
  return val;
}

- (void) setRanges: (NSMutableArray<NSString *> *) ranges {
  _ranges = ranges;
  _rangesIsSet = YES;
}

- (void) unsetRanges {
  _ranges = nil;
  _rangesIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeLIST) {
          SInt32 _size0;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size0 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2;
            if (![inProtocol readString:&_elem2 error: __thriftError]) return NO;
            [fieldValue addObject: _elem2];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.ranges = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"QueryVector" error: __thriftError]) return NO;
  if (_rangesIsSet) {
    if (_ranges != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ranges" type: TTypeLIST fieldID: 1 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRING size: (SInt32)[_ranges count] error: __thriftError]) return NO;
        int idx4;
        for (idx4 = 0; idx4 < [_ranges count]; idx4++)
        {
          if (![outProtocol writeString: [_ranges objectAtIndex: idx4] error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QueryVector("];
  [ms appendString: @"ranges:"];
  [ms appendFormat: @"%@", _ranges];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Query

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithAnalystId: (SInt64) analystId queryId: (SInt64) queryId queryStartTime: (SInt64) queryStartTime queryEndTime: (SInt64) queryEndTime epoch: (SInt64) epoch sensorType: (SensorType) sensorType matchingType: (MatchingType) matchingType queryVector: (QueryVector *) queryVector epsilon: (double) epsilon flipOne: (NSString *) flipOne flipTwo: (NSString *) flipTwo versionId: (SInt64) versionId
{
  self = [super init];
  if (self)  {
    _analystId = analystId;
    _analystIdIsSet = YES;
    _queryId = queryId;
    _queryIdIsSet = YES;
    _queryStartTime = queryStartTime;
    _queryStartTimeIsSet = YES;
    _queryEndTime = queryEndTime;
    _queryEndTimeIsSet = YES;
    _epoch = epoch;
    _epochIsSet = YES;
    _sensorType = sensorType;
    _sensorTypeIsSet = YES;
    _matchingType = matchingType;
    _matchingTypeIsSet = YES;
    _queryVector = queryVector;
    _queryVectorIsSet = YES;
    _epsilon = epsilon;
    _epsilonIsSet = YES;
    _flipOne = flipOne;
    _flipOneIsSet = YES;
    _flipTwo = flipTwo;
    _flipTwoIsSet = YES;
    _versionId = versionId;
    _versionIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"analystId"])
    {
      _analystId = [decoder decodeInt64ForKey: @"analystId"];
      _analystIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"queryId"])
    {
      _queryId = [decoder decodeInt64ForKey: @"queryId"];
      _queryIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"queryStartTime"])
    {
      _queryStartTime = [decoder decodeInt64ForKey: @"queryStartTime"];
      _queryStartTimeIsSet = YES;
    }
    if ([decoder containsValueForKey: @"queryEndTime"])
    {
      _queryEndTime = [decoder decodeInt64ForKey: @"queryEndTime"];
      _queryEndTimeIsSet = YES;
    }
    if ([decoder containsValueForKey: @"epoch"])
    {
      _epoch = [decoder decodeInt64ForKey: @"epoch"];
      _epochIsSet = YES;
    }
    if ([decoder containsValueForKey: @"sensorType"])
    {
      _sensorType = [decoder decodeIntForKey: @"sensorType"];
      _sensorTypeIsSet = YES;
    }
    if ([decoder containsValueForKey: @"matchingType"])
    {
      _matchingType = [decoder decodeIntForKey: @"matchingType"];
      _matchingTypeIsSet = YES;
    }
    if ([decoder containsValueForKey: @"queryVector"])
    {
      _queryVector = [decoder decodeObjectForKey: @"queryVector"];
      _queryVectorIsSet = YES;
    }
    if ([decoder containsValueForKey: @"epsilon"])
    {
      _epsilon = [decoder decodeDoubleForKey: @"epsilon"];
      _epsilonIsSet = YES;
    }
    if ([decoder containsValueForKey: @"flipOne"])
    {
      _flipOne = [decoder decodeObjectForKey: @"flipOne"];
      _flipOneIsSet = YES;
    }
    if ([decoder containsValueForKey: @"flipTwo"])
    {
      _flipTwo = [decoder decodeObjectForKey: @"flipTwo"];
      _flipTwoIsSet = YES;
    }
    if ([decoder containsValueForKey: @"versionId"])
    {
      _versionId = [decoder decodeInt64ForKey: @"versionId"];
      _versionIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_analystIdIsSet)
  {
    [encoder encodeInt64: _analystId forKey: @"analystId"];
  }
  if (_queryIdIsSet)
  {
    [encoder encodeInt64: _queryId forKey: @"queryId"];
  }
  if (_queryStartTimeIsSet)
  {
    [encoder encodeInt64: _queryStartTime forKey: @"queryStartTime"];
  }
  if (_queryEndTimeIsSet)
  {
    [encoder encodeInt64: _queryEndTime forKey: @"queryEndTime"];
  }
  if (_epochIsSet)
  {
    [encoder encodeInt64: _epoch forKey: @"epoch"];
  }
  if (_sensorTypeIsSet)
  {
    [encoder encodeInt: _sensorType forKey: @"sensorType"];
  }
  if (_matchingTypeIsSet)
  {
    [encoder encodeInt: _matchingType forKey: @"matchingType"];
  }
  if (_queryVectorIsSet)
  {
    [encoder encodeObject: _queryVector forKey: @"queryVector"];
  }
  if (_epsilonIsSet)
  {
    [encoder encodeDouble: _epsilon forKey: @"epsilon"];
  }
  if (_flipOneIsSet)
  {
    [encoder encodeObject: _flipOne forKey: @"flipOne"];
  }
  if (_flipTwoIsSet)
  {
    [encoder encodeObject: _flipTwo forKey: @"flipTwo"];
  }
  if (_versionIdIsSet)
  {
    [encoder encodeInt64: _versionId forKey: @"versionId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _analystIdIsSet ? 2654435761 : 0;
  if (_analystIdIsSet)
  {
    hash = (hash * 31) ^ [@(_analystId) hash];
  }
  hash = (hash * 31) ^ _queryIdIsSet ? 2654435761 : 0;
  if (_queryIdIsSet)
  {
    hash = (hash * 31) ^ [@(_queryId) hash];
  }
  hash = (hash * 31) ^ _queryStartTimeIsSet ? 2654435761 : 0;
  if (_queryStartTimeIsSet)
  {
    hash = (hash * 31) ^ [@(_queryStartTime) hash];
  }
  hash = (hash * 31) ^ _queryEndTimeIsSet ? 2654435761 : 0;
  if (_queryEndTimeIsSet)
  {
    hash = (hash * 31) ^ [@(_queryEndTime) hash];
  }
  hash = (hash * 31) ^ _epochIsSet ? 2654435761 : 0;
  if (_epochIsSet)
  {
    hash = (hash * 31) ^ [@(_epoch) hash];
  }
  hash = (hash * 31) ^ _sensorTypeIsSet ? 2654435761 : 0;
  if (_sensorTypeIsSet)
  {
    hash = (hash * 31) ^ [@(_sensorType) hash];
  }
  hash = (hash * 31) ^ _matchingTypeIsSet ? 2654435761 : 0;
  if (_matchingTypeIsSet)
  {
    hash = (hash * 31) ^ [@(_matchingType) hash];
  }
  hash = (hash * 31) ^ _queryVectorIsSet ? 2654435761 : 0;
  if (_queryVectorIsSet)
  {
    hash = (hash * 31) ^ [_queryVector hash];
  }
  hash = (hash * 31) ^ _epsilonIsSet ? 2654435761 : 0;
  if (_epsilonIsSet)
  {
    hash = (hash * 31) ^ [@(_epsilon) hash];
  }
  hash = (hash * 31) ^ _flipOneIsSet ? 2654435761 : 0;
  if (_flipOneIsSet)
  {
    hash = (hash * 31) ^ [_flipOne hash];
  }
  hash = (hash * 31) ^ _flipTwoIsSet ? 2654435761 : 0;
  if (_flipTwoIsSet)
  {
    hash = (hash * 31) ^ [_flipTwo hash];
  }
  hash = (hash * 31) ^ _versionIdIsSet ? 2654435761 : 0;
  if (_versionIdIsSet)
  {
    hash = (hash * 31) ^ [@(_versionId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Query class]]) {
    return NO;
  }
  Query *other = (Query *)anObject;
  if ((_analystIdIsSet != other->_analystIdIsSet) ||
      (_analystIdIsSet && (_analystId != other->_analystId))) {
    return NO;
  }
  if ((_queryIdIsSet != other->_queryIdIsSet) ||
      (_queryIdIsSet && (_queryId != other->_queryId))) {
    return NO;
  }
  if ((_queryStartTimeIsSet != other->_queryStartTimeIsSet) ||
      (_queryStartTimeIsSet && (_queryStartTime != other->_queryStartTime))) {
    return NO;
  }
  if ((_queryEndTimeIsSet != other->_queryEndTimeIsSet) ||
      (_queryEndTimeIsSet && (_queryEndTime != other->_queryEndTime))) {
    return NO;
  }
  if ((_epochIsSet != other->_epochIsSet) ||
      (_epochIsSet && (_epoch != other->_epoch))) {
    return NO;
  }
  if ((_sensorTypeIsSet != other->_sensorTypeIsSet) ||
      (_sensorTypeIsSet && (_sensorType != other->_sensorType))) {
    return NO;
  }
  if ((_matchingTypeIsSet != other->_matchingTypeIsSet) ||
      (_matchingTypeIsSet && (_matchingType != other->_matchingType))) {
    return NO;
  }
  if ((_queryVectorIsSet != other->_queryVectorIsSet) ||
      (_queryVectorIsSet && ((_queryVector || other->_queryVector) && ![_queryVector isEqual:other->_queryVector]))) {
    return NO;
  }
  if ((_epsilonIsSet != other->_epsilonIsSet) ||
      (_epsilonIsSet && (_epsilon != other->_epsilon))) {
    return NO;
  }
  if ((_flipOneIsSet != other->_flipOneIsSet) ||
      (_flipOneIsSet && ((_flipOne || other->_flipOne) && ![_flipOne isEqual:other->_flipOne]))) {
    return NO;
  }
  if ((_flipTwoIsSet != other->_flipTwoIsSet) ||
      (_flipTwoIsSet && ((_flipTwo || other->_flipTwo) && ![_flipTwo isEqual:other->_flipTwo]))) {
    return NO;
  }
  if ((_versionIdIsSet != other->_versionIdIsSet) ||
      (_versionIdIsSet && (_versionId != other->_versionId))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  Query * val = [Query new];
  if (_analystIdIsSet)
  {
    val.analystId = self.analystId;
  }
  if (_queryIdIsSet)
  {
    val.queryId = self.queryId;
  }
  if (_queryStartTimeIsSet)
  {
    val.queryStartTime = self.queryStartTime;
  }
  if (_queryEndTimeIsSet)
  {
    val.queryEndTime = self.queryEndTime;
  }
  if (_epochIsSet)
  {
    val.epoch = self.epoch;
  }
  if (_sensorTypeIsSet)
  {
    val.sensorType = self.sensorType;
  }
  if (_matchingTypeIsSet)
  {
    val.matchingType = self.matchingType;
  }
  if (_queryVectorIsSet)
  {
    val.queryVector = [self.queryVector copy];
  }
  if (_epsilonIsSet)
  {
    val.epsilon = self.epsilon;
  }
  if (_flipOneIsSet)
  {
    val.flipOne = [self.flipOne copy];
  }
  if (_flipTwoIsSet)
  {
    val.flipTwo = [self.flipTwo copy];
  }
  if (_versionIdIsSet)
  {
    val.versionId = self.versionId;
  }
  return val;
}

- (void) setAnalystId: (SInt64) analystId {
  _analystId = analystId;
  _analystIdIsSet = YES;
}

- (void) unsetAnalystId {
  _analystIdIsSet = NO;
}

- (void) setQueryId: (SInt64) queryId {
  _queryId = queryId;
  _queryIdIsSet = YES;
}

- (void) unsetQueryId {
  _queryIdIsSet = NO;
}

- (void) setQueryStartTime: (SInt64) queryStartTime {
  _queryStartTime = queryStartTime;
  _queryStartTimeIsSet = YES;
}

- (void) unsetQueryStartTime {
  _queryStartTimeIsSet = NO;
}

- (void) setQueryEndTime: (SInt64) queryEndTime {
  _queryEndTime = queryEndTime;
  _queryEndTimeIsSet = YES;
}

- (void) unsetQueryEndTime {
  _queryEndTimeIsSet = NO;
}

- (void) setEpoch: (SInt64) epoch {
  _epoch = epoch;
  _epochIsSet = YES;
}

- (void) unsetEpoch {
  _epochIsSet = NO;
}

- (void) setSensorType: (SensorType) sensorType {
  _sensorType = sensorType;
  _sensorTypeIsSet = YES;
}

- (void) unsetSensorType {
  _sensorTypeIsSet = NO;
}

- (void) setMatchingType: (MatchingType) matchingType {
  _matchingType = matchingType;
  _matchingTypeIsSet = YES;
}

- (void) unsetMatchingType {
  _matchingTypeIsSet = NO;
}

- (void) setQueryVector: (QueryVector *) queryVector {
  _queryVector = queryVector;
  _queryVectorIsSet = YES;
}

- (void) unsetQueryVector {
  _queryVector = nil;
  _queryVectorIsSet = NO;
}

- (void) setEpsilon: (double) epsilon {
  _epsilon = epsilon;
  _epsilonIsSet = YES;
}

- (void) unsetEpsilon {
  _epsilonIsSet = NO;
}

- (void) setFlipOne: (NSString *) flipOne {
  _flipOne = flipOne;
  _flipOneIsSet = YES;
}

- (void) unsetFlipOne {
  _flipOne = nil;
  _flipOneIsSet = NO;
}

- (void) setFlipTwo: (NSString *) flipTwo {
  _flipTwo = flipTwo;
  _flipTwoIsSet = YES;
}

- (void) unsetFlipTwo {
  _flipTwo = nil;
  _flipTwoIsSet = NO;
}

- (void) setVersionId: (SInt64) versionId {
  _versionId = versionId;
  _versionIdIsSet = YES;
}

- (void) unsetVersionId {
  _versionIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.analystId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.queryId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.queryStartTime = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.queryEndTime = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.epoch = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeI32) {
          SensorType fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.sensorType = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeI32) {
          MatchingType fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.matchingType = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 8:
        if (fieldType == TTypeSTRUCT) {
          QueryVector *fieldValue = [[QueryVector alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.queryVector = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 9:
        if (fieldType == TTypeDOUBLE) {
          double fieldValue;
          if (![inProtocol readDouble:&fieldValue error: __thriftError]) return NO;
          self.epsilon = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 10:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.flipOne = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 11:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.flipTwo = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 12:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.versionId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Query" error: __thriftError]) return NO;
  if (_analystIdIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"analystId" type: TTypeI64 fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _analystId error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_queryIdIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"queryId" type: TTypeI64 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _queryId error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_queryStartTimeIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"queryStartTime" type: TTypeI64 fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _queryStartTime error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_queryEndTimeIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"queryEndTime" type: TTypeI64 fieldID: 4 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _queryEndTime error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_epochIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"epoch" type: TTypeI64 fieldID: 5 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _epoch error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_sensorTypeIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"sensorType" type: TTypeI32 fieldID: 6 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _sensorType error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_matchingTypeIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"matchingType" type: TTypeI32 fieldID: 7 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _matchingType error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_queryVectorIsSet) {
    if (_queryVector != nil) {
      if (![outProtocol writeFieldBeginWithName: @"queryVector" type: TTypeSTRUCT fieldID: 8 error: __thriftError]) return NO;
      if (![_queryVector write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_epsilonIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"epsilon" type: TTypeDOUBLE fieldID: 9 error: __thriftError]) return NO;
    if (![outProtocol writeDouble: _epsilon error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_flipOneIsSet) {
    if (_flipOne != nil) {
      if (![outProtocol writeFieldBeginWithName: @"flipOne" type: TTypeSTRING fieldID: 10 error: __thriftError]) return NO;
      if (![outProtocol writeString: _flipOne error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_flipTwoIsSet) {
    if (_flipTwo != nil) {
      if (![outProtocol writeFieldBeginWithName: @"flipTwo" type: TTypeSTRING fieldID: 11 error: __thriftError]) return NO;
      if (![outProtocol writeString: _flipTwo error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_versionIdIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"versionId" type: TTypeI64 fieldID: 12 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _versionId error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Query("];
  [ms appendString: @"analystId:"];
  [ms appendFormat: @"%qi", _analystId];
  [ms appendString: @",queryId:"];
  [ms appendFormat: @"%qi", _queryId];
  [ms appendString: @",queryStartTime:"];
  [ms appendFormat: @"%qi", _queryStartTime];
  [ms appendString: @",queryEndTime:"];
  [ms appendFormat: @"%qi", _queryEndTime];
  [ms appendString: @",epoch:"];
  [ms appendFormat: @"%qi", _epoch];
  [ms appendString: @",sensorType:"];
  [ms appendFormat: @"%i", (int)_sensorType];
  [ms appendString: @",matchingType:"];
  [ms appendFormat: @"%i", (int)_matchingType];
  [ms appendString: @",queryVector:"];
  [ms appendFormat: @"%@", _queryVector];
  [ms appendString: @",epsilon:"];
  [ms appendFormat: @"%f", _epsilon];
  [ms appendString: @",flipOne:"];
  [ms appendFormat: @"\"%@\"", _flipOne];
  [ms appendString: @",flipTwo:"];
  [ms appendFormat: @"\"%@\"", _flipTwo];
  [ms appendString: @",versionId:"];
  [ms appendFormat: @"%qi", _versionId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

NSString *QueryErrorDomain = @"QueryErrorDomain";


