/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dataluminosity.message;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-14")
public class Query implements org.apache.thrift.TBase<Query, Query._Fields>, java.io.Serializable, Cloneable, Comparable<Query> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Query");

  private static final org.apache.thrift.protocol.TField ANALYST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("analystId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("queryId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField QUERY_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("queryStartTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField QUERY_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("queryEndTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField EPOCH_FIELD_DESC = new org.apache.thrift.protocol.TField("epoch", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField QUERY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("queryType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField EPSILON_FIELD_DESC = new org.apache.thrift.protocol.TField("epsilon", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField QUERY_VECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("queryVector", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField FLIP_ONE_FIELD_DESC = new org.apache.thrift.protocol.TField("flipOne", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField FLIP_TWO_FIELD_DESC = new org.apache.thrift.protocol.TField("flipTwo", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField VERSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("versionId", org.apache.thrift.protocol.TType.I64, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryTupleSchemeFactory());
  }

  public long analystId; // required
  public long queryId; // required
  public long queryStartTime; // required
  public long queryEndTime; // required
  public long epoch; // required
  /**
   * 
   * @see SensorType
   */
  public SensorType queryType; // required
  public double epsilon; // required
  public QueryVector queryVector; // required
  public String flipOne; // required
  public String flipTwo; // required
  public long versionId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ANALYST_ID((short)1, "analystId"),
    QUERY_ID((short)2, "queryId"),
    QUERY_START_TIME((short)3, "queryStartTime"),
    QUERY_END_TIME((short)4, "queryEndTime"),
    EPOCH((short)5, "epoch"),
    /**
     * 
     * @see SensorType
     */
    QUERY_TYPE((short)6, "queryType"),
    EPSILON((short)7, "epsilon"),
    QUERY_VECTOR((short)8, "queryVector"),
    FLIP_ONE((short)9, "flipOne"),
    FLIP_TWO((short)10, "flipTwo"),
    VERSION_ID((short)11, "versionId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ANALYST_ID
          return ANALYST_ID;
        case 2: // QUERY_ID
          return QUERY_ID;
        case 3: // QUERY_START_TIME
          return QUERY_START_TIME;
        case 4: // QUERY_END_TIME
          return QUERY_END_TIME;
        case 5: // EPOCH
          return EPOCH;
        case 6: // QUERY_TYPE
          return QUERY_TYPE;
        case 7: // EPSILON
          return EPSILON;
        case 8: // QUERY_VECTOR
          return QUERY_VECTOR;
        case 9: // FLIP_ONE
          return FLIP_ONE;
        case 10: // FLIP_TWO
          return FLIP_TWO;
        case 11: // VERSION_ID
          return VERSION_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ANALYSTID_ISSET_ID = 0;
  private static final int __QUERYID_ISSET_ID = 1;
  private static final int __QUERYSTARTTIME_ISSET_ID = 2;
  private static final int __QUERYENDTIME_ISSET_ID = 3;
  private static final int __EPOCH_ISSET_ID = 4;
  private static final int __EPSILON_ISSET_ID = 5;
  private static final int __VERSIONID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ANALYST_ID, new org.apache.thrift.meta_data.FieldMetaData("analystId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("queryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUERY_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("queryStartTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUERY_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("queryEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EPOCH, new org.apache.thrift.meta_data.FieldMetaData("epoch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUERY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("queryType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SensorType.class)));
    tmpMap.put(_Fields.EPSILON, new org.apache.thrift.meta_data.FieldMetaData("epsilon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QUERY_VECTOR, new org.apache.thrift.meta_data.FieldMetaData("queryVector", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QueryVector.class)));
    tmpMap.put(_Fields.FLIP_ONE, new org.apache.thrift.meta_data.FieldMetaData("flipOne", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLIP_TWO, new org.apache.thrift.meta_data.FieldMetaData("flipTwo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION_ID, new org.apache.thrift.meta_data.FieldMetaData("versionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Query.class, metaDataMap);
  }

  public Query() {
  }

  public Query(
    long analystId,
    long queryId,
    long queryStartTime,
    long queryEndTime,
    long epoch,
    SensorType queryType,
    double epsilon,
    QueryVector queryVector,
    String flipOne,
    String flipTwo,
    long versionId)
  {
    this();
    this.analystId = analystId;
    setAnalystIdIsSet(true);
    this.queryId = queryId;
    setQueryIdIsSet(true);
    this.queryStartTime = queryStartTime;
    setQueryStartTimeIsSet(true);
    this.queryEndTime = queryEndTime;
    setQueryEndTimeIsSet(true);
    this.epoch = epoch;
    setEpochIsSet(true);
    this.queryType = queryType;
    this.epsilon = epsilon;
    setEpsilonIsSet(true);
    this.queryVector = queryVector;
    this.flipOne = flipOne;
    this.flipTwo = flipTwo;
    this.versionId = versionId;
    setVersionIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Query(Query other) {
    __isset_bitfield = other.__isset_bitfield;
    this.analystId = other.analystId;
    this.queryId = other.queryId;
    this.queryStartTime = other.queryStartTime;
    this.queryEndTime = other.queryEndTime;
    this.epoch = other.epoch;
    if (other.isSetQueryType()) {
      this.queryType = other.queryType;
    }
    this.epsilon = other.epsilon;
    if (other.isSetQueryVector()) {
      this.queryVector = new QueryVector(other.queryVector);
    }
    if (other.isSetFlipOne()) {
      this.flipOne = other.flipOne;
    }
    if (other.isSetFlipTwo()) {
      this.flipTwo = other.flipTwo;
    }
    this.versionId = other.versionId;
  }

  public Query deepCopy() {
    return new Query(this);
  }

  @Override
  public void clear() {
    setAnalystIdIsSet(false);
    this.analystId = 0;
    setQueryIdIsSet(false);
    this.queryId = 0;
    setQueryStartTimeIsSet(false);
    this.queryStartTime = 0;
    setQueryEndTimeIsSet(false);
    this.queryEndTime = 0;
    setEpochIsSet(false);
    this.epoch = 0;
    this.queryType = null;
    setEpsilonIsSet(false);
    this.epsilon = 0.0;
    this.queryVector = null;
    this.flipOne = null;
    this.flipTwo = null;
    setVersionIdIsSet(false);
    this.versionId = 0;
  }

  public long getAnalystId() {
    return this.analystId;
  }

  public Query setAnalystId(long analystId) {
    this.analystId = analystId;
    setAnalystIdIsSet(true);
    return this;
  }

  public void unsetAnalystId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ANALYSTID_ISSET_ID);
  }

  /** Returns true if field analystId is set (has been assigned a value) and false otherwise */
  public boolean isSetAnalystId() {
    return EncodingUtils.testBit(__isset_bitfield, __ANALYSTID_ISSET_ID);
  }

  public void setAnalystIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ANALYSTID_ISSET_ID, value);
  }

  public long getQueryId() {
    return this.queryId;
  }

  public Query setQueryId(long queryId) {
    this.queryId = queryId;
    setQueryIdIsSet(true);
    return this;
  }

  public void unsetQueryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUERYID_ISSET_ID);
  }

  /** Returns true if field queryId is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryId() {
    return EncodingUtils.testBit(__isset_bitfield, __QUERYID_ISSET_ID);
  }

  public void setQueryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUERYID_ISSET_ID, value);
  }

  public long getQueryStartTime() {
    return this.queryStartTime;
  }

  public Query setQueryStartTime(long queryStartTime) {
    this.queryStartTime = queryStartTime;
    setQueryStartTimeIsSet(true);
    return this;
  }

  public void unsetQueryStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUERYSTARTTIME_ISSET_ID);
  }

  /** Returns true if field queryStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __QUERYSTARTTIME_ISSET_ID);
  }

  public void setQueryStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUERYSTARTTIME_ISSET_ID, value);
  }

  public long getQueryEndTime() {
    return this.queryEndTime;
  }

  public Query setQueryEndTime(long queryEndTime) {
    this.queryEndTime = queryEndTime;
    setQueryEndTimeIsSet(true);
    return this;
  }

  public void unsetQueryEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUERYENDTIME_ISSET_ID);
  }

  /** Returns true if field queryEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __QUERYENDTIME_ISSET_ID);
  }

  public void setQueryEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUERYENDTIME_ISSET_ID, value);
  }

  public long getEpoch() {
    return this.epoch;
  }

  public Query setEpoch(long epoch) {
    this.epoch = epoch;
    setEpochIsSet(true);
    return this;
  }

  public void unsetEpoch() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EPOCH_ISSET_ID);
  }

  /** Returns true if field epoch is set (has been assigned a value) and false otherwise */
  public boolean isSetEpoch() {
    return EncodingUtils.testBit(__isset_bitfield, __EPOCH_ISSET_ID);
  }

  public void setEpochIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EPOCH_ISSET_ID, value);
  }

  /**
   * 
   * @see SensorType
   */
  public SensorType getQueryType() {
    return this.queryType;
  }

  /**
   * 
   * @see SensorType
   */
  public Query setQueryType(SensorType queryType) {
    this.queryType = queryType;
    return this;
  }

  public void unsetQueryType() {
    this.queryType = null;
  }

  /** Returns true if field queryType is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryType() {
    return this.queryType != null;
  }

  public void setQueryTypeIsSet(boolean value) {
    if (!value) {
      this.queryType = null;
    }
  }

  public double getEpsilon() {
    return this.epsilon;
  }

  public Query setEpsilon(double epsilon) {
    this.epsilon = epsilon;
    setEpsilonIsSet(true);
    return this;
  }

  public void unsetEpsilon() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EPSILON_ISSET_ID);
  }

  /** Returns true if field epsilon is set (has been assigned a value) and false otherwise */
  public boolean isSetEpsilon() {
    return EncodingUtils.testBit(__isset_bitfield, __EPSILON_ISSET_ID);
  }

  public void setEpsilonIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EPSILON_ISSET_ID, value);
  }

  public QueryVector getQueryVector() {
    return this.queryVector;
  }

  public Query setQueryVector(QueryVector queryVector) {
    this.queryVector = queryVector;
    return this;
  }

  public void unsetQueryVector() {
    this.queryVector = null;
  }

  /** Returns true if field queryVector is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryVector() {
    return this.queryVector != null;
  }

  public void setQueryVectorIsSet(boolean value) {
    if (!value) {
      this.queryVector = null;
    }
  }

  public String getFlipOne() {
    return this.flipOne;
  }

  public Query setFlipOne(String flipOne) {
    this.flipOne = flipOne;
    return this;
  }

  public void unsetFlipOne() {
    this.flipOne = null;
  }

  /** Returns true if field flipOne is set (has been assigned a value) and false otherwise */
  public boolean isSetFlipOne() {
    return this.flipOne != null;
  }

  public void setFlipOneIsSet(boolean value) {
    if (!value) {
      this.flipOne = null;
    }
  }

  public String getFlipTwo() {
    return this.flipTwo;
  }

  public Query setFlipTwo(String flipTwo) {
    this.flipTwo = flipTwo;
    return this;
  }

  public void unsetFlipTwo() {
    this.flipTwo = null;
  }

  /** Returns true if field flipTwo is set (has been assigned a value) and false otherwise */
  public boolean isSetFlipTwo() {
    return this.flipTwo != null;
  }

  public void setFlipTwoIsSet(boolean value) {
    if (!value) {
      this.flipTwo = null;
    }
  }

  public long getVersionId() {
    return this.versionId;
  }

  public Query setVersionId(long versionId) {
    this.versionId = versionId;
    setVersionIdIsSet(true);
    return this;
  }

  public void unsetVersionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSIONID_ISSET_ID);
  }

  /** Returns true if field versionId is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionId() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSIONID_ISSET_ID);
  }

  public void setVersionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSIONID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ANALYST_ID:
      if (value == null) {
        unsetAnalystId();
      } else {
        setAnalystId((Long)value);
      }
      break;

    case QUERY_ID:
      if (value == null) {
        unsetQueryId();
      } else {
        setQueryId((Long)value);
      }
      break;

    case QUERY_START_TIME:
      if (value == null) {
        unsetQueryStartTime();
      } else {
        setQueryStartTime((Long)value);
      }
      break;

    case QUERY_END_TIME:
      if (value == null) {
        unsetQueryEndTime();
      } else {
        setQueryEndTime((Long)value);
      }
      break;

    case EPOCH:
      if (value == null) {
        unsetEpoch();
      } else {
        setEpoch((Long)value);
      }
      break;

    case QUERY_TYPE:
      if (value == null) {
        unsetQueryType();
      } else {
        setQueryType((SensorType)value);
      }
      break;

    case EPSILON:
      if (value == null) {
        unsetEpsilon();
      } else {
        setEpsilon((Double)value);
      }
      break;

    case QUERY_VECTOR:
      if (value == null) {
        unsetQueryVector();
      } else {
        setQueryVector((QueryVector)value);
      }
      break;

    case FLIP_ONE:
      if (value == null) {
        unsetFlipOne();
      } else {
        setFlipOne((String)value);
      }
      break;

    case FLIP_TWO:
      if (value == null) {
        unsetFlipTwo();
      } else {
        setFlipTwo((String)value);
      }
      break;

    case VERSION_ID:
      if (value == null) {
        unsetVersionId();
      } else {
        setVersionId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ANALYST_ID:
      return getAnalystId();

    case QUERY_ID:
      return getQueryId();

    case QUERY_START_TIME:
      return getQueryStartTime();

    case QUERY_END_TIME:
      return getQueryEndTime();

    case EPOCH:
      return getEpoch();

    case QUERY_TYPE:
      return getQueryType();

    case EPSILON:
      return getEpsilon();

    case QUERY_VECTOR:
      return getQueryVector();

    case FLIP_ONE:
      return getFlipOne();

    case FLIP_TWO:
      return getFlipTwo();

    case VERSION_ID:
      return getVersionId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ANALYST_ID:
      return isSetAnalystId();
    case QUERY_ID:
      return isSetQueryId();
    case QUERY_START_TIME:
      return isSetQueryStartTime();
    case QUERY_END_TIME:
      return isSetQueryEndTime();
    case EPOCH:
      return isSetEpoch();
    case QUERY_TYPE:
      return isSetQueryType();
    case EPSILON:
      return isSetEpsilon();
    case QUERY_VECTOR:
      return isSetQueryVector();
    case FLIP_ONE:
      return isSetFlipOne();
    case FLIP_TWO:
      return isSetFlipTwo();
    case VERSION_ID:
      return isSetVersionId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Query)
      return this.equals((Query)that);
    return false;
  }

  public boolean equals(Query that) {
    if (that == null)
      return false;

    boolean this_present_analystId = true;
    boolean that_present_analystId = true;
    if (this_present_analystId || that_present_analystId) {
      if (!(this_present_analystId && that_present_analystId))
        return false;
      if (this.analystId != that.analystId)
        return false;
    }

    boolean this_present_queryId = true;
    boolean that_present_queryId = true;
    if (this_present_queryId || that_present_queryId) {
      if (!(this_present_queryId && that_present_queryId))
        return false;
      if (this.queryId != that.queryId)
        return false;
    }

    boolean this_present_queryStartTime = true;
    boolean that_present_queryStartTime = true;
    if (this_present_queryStartTime || that_present_queryStartTime) {
      if (!(this_present_queryStartTime && that_present_queryStartTime))
        return false;
      if (this.queryStartTime != that.queryStartTime)
        return false;
    }

    boolean this_present_queryEndTime = true;
    boolean that_present_queryEndTime = true;
    if (this_present_queryEndTime || that_present_queryEndTime) {
      if (!(this_present_queryEndTime && that_present_queryEndTime))
        return false;
      if (this.queryEndTime != that.queryEndTime)
        return false;
    }

    boolean this_present_epoch = true;
    boolean that_present_epoch = true;
    if (this_present_epoch || that_present_epoch) {
      if (!(this_present_epoch && that_present_epoch))
        return false;
      if (this.epoch != that.epoch)
        return false;
    }

    boolean this_present_queryType = true && this.isSetQueryType();
    boolean that_present_queryType = true && that.isSetQueryType();
    if (this_present_queryType || that_present_queryType) {
      if (!(this_present_queryType && that_present_queryType))
        return false;
      if (!this.queryType.equals(that.queryType))
        return false;
    }

    boolean this_present_epsilon = true;
    boolean that_present_epsilon = true;
    if (this_present_epsilon || that_present_epsilon) {
      if (!(this_present_epsilon && that_present_epsilon))
        return false;
      if (this.epsilon != that.epsilon)
        return false;
    }

    boolean this_present_queryVector = true && this.isSetQueryVector();
    boolean that_present_queryVector = true && that.isSetQueryVector();
    if (this_present_queryVector || that_present_queryVector) {
      if (!(this_present_queryVector && that_present_queryVector))
        return false;
      if (!this.queryVector.equals(that.queryVector))
        return false;
    }

    boolean this_present_flipOne = true && this.isSetFlipOne();
    boolean that_present_flipOne = true && that.isSetFlipOne();
    if (this_present_flipOne || that_present_flipOne) {
      if (!(this_present_flipOne && that_present_flipOne))
        return false;
      if (!this.flipOne.equals(that.flipOne))
        return false;
    }

    boolean this_present_flipTwo = true && this.isSetFlipTwo();
    boolean that_present_flipTwo = true && that.isSetFlipTwo();
    if (this_present_flipTwo || that_present_flipTwo) {
      if (!(this_present_flipTwo && that_present_flipTwo))
        return false;
      if (!this.flipTwo.equals(that.flipTwo))
        return false;
    }

    boolean this_present_versionId = true;
    boolean that_present_versionId = true;
    if (this_present_versionId || that_present_versionId) {
      if (!(this_present_versionId && that_present_versionId))
        return false;
      if (this.versionId != that.versionId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_analystId = true;
    list.add(present_analystId);
    if (present_analystId)
      list.add(analystId);

    boolean present_queryId = true;
    list.add(present_queryId);
    if (present_queryId)
      list.add(queryId);

    boolean present_queryStartTime = true;
    list.add(present_queryStartTime);
    if (present_queryStartTime)
      list.add(queryStartTime);

    boolean present_queryEndTime = true;
    list.add(present_queryEndTime);
    if (present_queryEndTime)
      list.add(queryEndTime);

    boolean present_epoch = true;
    list.add(present_epoch);
    if (present_epoch)
      list.add(epoch);

    boolean present_queryType = true && (isSetQueryType());
    list.add(present_queryType);
    if (present_queryType)
      list.add(queryType.getValue());

    boolean present_epsilon = true;
    list.add(present_epsilon);
    if (present_epsilon)
      list.add(epsilon);

    boolean present_queryVector = true && (isSetQueryVector());
    list.add(present_queryVector);
    if (present_queryVector)
      list.add(queryVector);

    boolean present_flipOne = true && (isSetFlipOne());
    list.add(present_flipOne);
    if (present_flipOne)
      list.add(flipOne);

    boolean present_flipTwo = true && (isSetFlipTwo());
    list.add(present_flipTwo);
    if (present_flipTwo)
      list.add(flipTwo);

    boolean present_versionId = true;
    list.add(present_versionId);
    if (present_versionId)
      list.add(versionId);

    return list.hashCode();
  }

  @Override
  public int compareTo(Query other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAnalystId()).compareTo(other.isSetAnalystId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnalystId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.analystId, other.analystId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryId()).compareTo(other.isSetQueryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryId, other.queryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryStartTime()).compareTo(other.isSetQueryStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryStartTime, other.queryStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryEndTime()).compareTo(other.isSetQueryEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryEndTime, other.queryEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEpoch()).compareTo(other.isSetEpoch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEpoch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.epoch, other.epoch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryType()).compareTo(other.isSetQueryType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryType, other.queryType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEpsilon()).compareTo(other.isSetEpsilon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEpsilon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.epsilon, other.epsilon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryVector()).compareTo(other.isSetQueryVector());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryVector()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryVector, other.queryVector);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlipOne()).compareTo(other.isSetFlipOne());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlipOne()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flipOne, other.flipOne);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlipTwo()).compareTo(other.isSetFlipTwo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlipTwo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flipTwo, other.flipTwo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersionId()).compareTo(other.isSetVersionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionId, other.versionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Query(");
    boolean first = true;

    sb.append("analystId:");
    sb.append(this.analystId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryId:");
    sb.append(this.queryId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryStartTime:");
    sb.append(this.queryStartTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryEndTime:");
    sb.append(this.queryEndTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("epoch:");
    sb.append(this.epoch);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryType:");
    if (this.queryType == null) {
      sb.append("null");
    } else {
      sb.append(this.queryType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("epsilon:");
    sb.append(this.epsilon);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryVector:");
    if (this.queryVector == null) {
      sb.append("null");
    } else {
      sb.append(this.queryVector);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flipOne:");
    if (this.flipOne == null) {
      sb.append("null");
    } else {
      sb.append(this.flipOne);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flipTwo:");
    if (this.flipTwo == null) {
      sb.append("null");
    } else {
      sb.append(this.flipTwo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("versionId:");
    sb.append(this.versionId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (queryVector != null) {
      queryVector.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryStandardSchemeFactory implements SchemeFactory {
    public QueryStandardScheme getScheme() {
      return new QueryStandardScheme();
    }
  }

  private static class QueryStandardScheme extends StandardScheme<Query> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Query struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ANALYST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.analystId = iprot.readI64();
              struct.setAnalystIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.queryId = iprot.readI64();
              struct.setQueryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUERY_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.queryStartTime = iprot.readI64();
              struct.setQueryStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUERY_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.queryEndTime = iprot.readI64();
              struct.setQueryEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EPOCH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.epoch = iprot.readI64();
              struct.setEpochIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // QUERY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queryType = com.dataluminosity.message.SensorType.findByValue(iprot.readI32());
              struct.setQueryTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EPSILON
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.epsilon = iprot.readDouble();
              struct.setEpsilonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // QUERY_VECTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.queryVector = new QueryVector();
              struct.queryVector.read(iprot);
              struct.setQueryVectorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FLIP_ONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flipOne = iprot.readString();
              struct.setFlipOneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FLIP_TWO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flipTwo = iprot.readString();
              struct.setFlipTwoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // VERSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.versionId = iprot.readI64();
              struct.setVersionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Query struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ANALYST_ID_FIELD_DESC);
      oprot.writeI64(struct.analystId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUERY_ID_FIELD_DESC);
      oprot.writeI64(struct.queryId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUERY_START_TIME_FIELD_DESC);
      oprot.writeI64(struct.queryStartTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUERY_END_TIME_FIELD_DESC);
      oprot.writeI64(struct.queryEndTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EPOCH_FIELD_DESC);
      oprot.writeI64(struct.epoch);
      oprot.writeFieldEnd();
      if (struct.queryType != null) {
        oprot.writeFieldBegin(QUERY_TYPE_FIELD_DESC);
        oprot.writeI32(struct.queryType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EPSILON_FIELD_DESC);
      oprot.writeDouble(struct.epsilon);
      oprot.writeFieldEnd();
      if (struct.queryVector != null) {
        oprot.writeFieldBegin(QUERY_VECTOR_FIELD_DESC);
        struct.queryVector.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.flipOne != null) {
        oprot.writeFieldBegin(FLIP_ONE_FIELD_DESC);
        oprot.writeString(struct.flipOne);
        oprot.writeFieldEnd();
      }
      if (struct.flipTwo != null) {
        oprot.writeFieldBegin(FLIP_TWO_FIELD_DESC);
        oprot.writeString(struct.flipTwo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VERSION_ID_FIELD_DESC);
      oprot.writeI64(struct.versionId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryTupleSchemeFactory implements SchemeFactory {
    public QueryTupleScheme getScheme() {
      return new QueryTupleScheme();
    }
  }

  private static class QueryTupleScheme extends TupleScheme<Query> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Query struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAnalystId()) {
        optionals.set(0);
      }
      if (struct.isSetQueryId()) {
        optionals.set(1);
      }
      if (struct.isSetQueryStartTime()) {
        optionals.set(2);
      }
      if (struct.isSetQueryEndTime()) {
        optionals.set(3);
      }
      if (struct.isSetEpoch()) {
        optionals.set(4);
      }
      if (struct.isSetQueryType()) {
        optionals.set(5);
      }
      if (struct.isSetEpsilon()) {
        optionals.set(6);
      }
      if (struct.isSetQueryVector()) {
        optionals.set(7);
      }
      if (struct.isSetFlipOne()) {
        optionals.set(8);
      }
      if (struct.isSetFlipTwo()) {
        optionals.set(9);
      }
      if (struct.isSetVersionId()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetAnalystId()) {
        oprot.writeI64(struct.analystId);
      }
      if (struct.isSetQueryId()) {
        oprot.writeI64(struct.queryId);
      }
      if (struct.isSetQueryStartTime()) {
        oprot.writeI64(struct.queryStartTime);
      }
      if (struct.isSetQueryEndTime()) {
        oprot.writeI64(struct.queryEndTime);
      }
      if (struct.isSetEpoch()) {
        oprot.writeI64(struct.epoch);
      }
      if (struct.isSetQueryType()) {
        oprot.writeI32(struct.queryType.getValue());
      }
      if (struct.isSetEpsilon()) {
        oprot.writeDouble(struct.epsilon);
      }
      if (struct.isSetQueryVector()) {
        struct.queryVector.write(oprot);
      }
      if (struct.isSetFlipOne()) {
        oprot.writeString(struct.flipOne);
      }
      if (struct.isSetFlipTwo()) {
        oprot.writeString(struct.flipTwo);
      }
      if (struct.isSetVersionId()) {
        oprot.writeI64(struct.versionId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Query struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.analystId = iprot.readI64();
        struct.setAnalystIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.queryId = iprot.readI64();
        struct.setQueryIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.queryStartTime = iprot.readI64();
        struct.setQueryStartTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.queryEndTime = iprot.readI64();
        struct.setQueryEndTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.epoch = iprot.readI64();
        struct.setEpochIsSet(true);
      }
      if (incoming.get(5)) {
        struct.queryType = com.dataluminosity.message.SensorType.findByValue(iprot.readI32());
        struct.setQueryTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.epsilon = iprot.readDouble();
        struct.setEpsilonIsSet(true);
      }
      if (incoming.get(7)) {
        struct.queryVector = new QueryVector();
        struct.queryVector.read(iprot);
        struct.setQueryVectorIsSet(true);
      }
      if (incoming.get(8)) {
        struct.flipOne = iprot.readString();
        struct.setFlipOneIsSet(true);
      }
      if (incoming.get(9)) {
        struct.flipTwo = iprot.readString();
        struct.setFlipTwoIsSet(true);
      }
      if (incoming.get(10)) {
        struct.versionId = iprot.readI64();
        struct.setVersionIdIsSet(true);
      }
    }
  }

}

