#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class PrivateAnswer:
  """
  Attributes:
   - analystId
   - queryId
   - privateAnswerBits
   - bitlen
   - joinId
   - versionId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'analystId', None, None, ), # 1
    (2, TType.I64, 'queryId', None, None, ), # 2
    (3, TType.STRING, 'privateAnswerBits', None, None, ), # 3
    (4, TType.I32, 'bitlen', None, None, ), # 4
    (5, TType.I64, 'joinId', None, None, ), # 5
    (6, TType.I64, 'versionId', None, None, ), # 6
  )

  def __init__(self, analystId=None, queryId=None, privateAnswerBits=None, bitlen=None, joinId=None, versionId=None,):
    self.analystId = analystId
    self.queryId = queryId
    self.privateAnswerBits = privateAnswerBits
    self.bitlen = bitlen
    self.joinId = joinId
    self.versionId = versionId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.analystId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.queryId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.privateAnswerBits = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.bitlen = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.joinId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.versionId = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PrivateAnswer')
    if self.analystId is not None:
      oprot.writeFieldBegin('analystId', TType.I64, 1)
      oprot.writeI64(self.analystId)
      oprot.writeFieldEnd()
    if self.queryId is not None:
      oprot.writeFieldBegin('queryId', TType.I64, 2)
      oprot.writeI64(self.queryId)
      oprot.writeFieldEnd()
    if self.privateAnswerBits is not None:
      oprot.writeFieldBegin('privateAnswerBits', TType.STRING, 3)
      oprot.writeString(self.privateAnswerBits)
      oprot.writeFieldEnd()
    if self.bitlen is not None:
      oprot.writeFieldBegin('bitlen', TType.I32, 4)
      oprot.writeI32(self.bitlen)
      oprot.writeFieldEnd()
    if self.joinId is not None:
      oprot.writeFieldBegin('joinId', TType.I64, 5)
      oprot.writeI64(self.joinId)
      oprot.writeFieldEnd()
    if self.versionId is not None:
      oprot.writeFieldBegin('versionId', TType.I64, 6)
      oprot.writeI64(self.versionId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.analystId)
    value = (value * 31) ^ hash(self.queryId)
    value = (value * 31) ^ hash(self.privateAnswerBits)
    value = (value * 31) ^ hash(self.bitlen)
    value = (value * 31) ^ hash(self.joinId)
    value = (value * 31) ^ hash(self.versionId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
