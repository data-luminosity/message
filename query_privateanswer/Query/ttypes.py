#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class SensorType(object):
    LOCATION = 0
    GYROSCOPE = 1
    ACCELEROMETER = 2
    MAGNETOMETER = 3
    PROXIMITY = 4
    BRIGHTNESS = 5
    SOUNDLEVEL = 6
    BATTERYLEVEL = 7
    WIFIDATAUSAGE = 8
    CELLDATAUSAGE = 9

    _VALUES_TO_NAMES = {
        0: "LOCATION",
        1: "GYROSCOPE",
        2: "ACCELEROMETER",
        3: "MAGNETOMETER",
        4: "PROXIMITY",
        5: "BRIGHTNESS",
        6: "SOUNDLEVEL",
        7: "BATTERYLEVEL",
        8: "WIFIDATAUSAGE",
        9: "CELLDATAUSAGE",
    }

    _NAMES_TO_VALUES = {
        "LOCATION": 0,
        "GYROSCOPE": 1,
        "ACCELEROMETER": 2,
        "MAGNETOMETER": 3,
        "PROXIMITY": 4,
        "BRIGHTNESS": 5,
        "SOUNDLEVEL": 6,
        "BATTERYLEVEL": 7,
        "WIFIDATAUSAGE": 8,
        "CELLDATAUSAGE": 9,
    }


class MatchingType(object):
    LOCATION_MATCHING = 0
    NUMERICAL_MATCHING = 1
    STRING_MATCHING = 2

    _VALUES_TO_NAMES = {
        0: "LOCATION_MATCHING",
        1: "NUMERICAL_MATCHING",
        2: "STRING_MATCHING",
    }

    _NAMES_TO_VALUES = {
        "LOCATION_MATCHING": 0,
        "NUMERICAL_MATCHING": 1,
        "STRING_MATCHING": 2,
    }


class QueryVector(object):
    """
    Attributes:
     - ranges
    """


    def __init__(self, ranges=None,):
        self.ranges = ranges

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.ranges = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.ranges.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QueryVector')
        if self.ranges is not None:
            oprot.writeFieldBegin('ranges', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.ranges))
            for iter6 in self.ranges:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Query(object):
    """
    Attributes:
     - analystId
     - queryId
     - queryStartTime
     - queryEndTime
     - epoch
     - sensorType
     - matchingType
     - queryVector
     - epsilon
     - flipOne
     - flipTwo
     - versionId
    """


    def __init__(self, analystId=None, queryId=None, queryStartTime=None, queryEndTime=None, epoch=None, sensorType=None, matchingType=None, queryVector=None, epsilon=None, flipOne=None, flipTwo=None, versionId=None,):
        self.analystId = analystId
        self.queryId = queryId
        self.queryStartTime = queryStartTime
        self.queryEndTime = queryEndTime
        self.epoch = epoch
        self.sensorType = sensorType
        self.matchingType = matchingType
        self.queryVector = queryVector
        self.epsilon = epsilon
        self.flipOne = flipOne
        self.flipTwo = flipTwo
        self.versionId = versionId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.analystId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.queryId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.queryStartTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.queryEndTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.epoch = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.sensorType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.matchingType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.queryVector = QueryVector()
                    self.queryVector.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.epsilon = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.flipOne = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.flipTwo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.versionId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Query')
        if self.analystId is not None:
            oprot.writeFieldBegin('analystId', TType.I64, 1)
            oprot.writeI64(self.analystId)
            oprot.writeFieldEnd()
        if self.queryId is not None:
            oprot.writeFieldBegin('queryId', TType.I64, 2)
            oprot.writeI64(self.queryId)
            oprot.writeFieldEnd()
        if self.queryStartTime is not None:
            oprot.writeFieldBegin('queryStartTime', TType.I64, 3)
            oprot.writeI64(self.queryStartTime)
            oprot.writeFieldEnd()
        if self.queryEndTime is not None:
            oprot.writeFieldBegin('queryEndTime', TType.I64, 4)
            oprot.writeI64(self.queryEndTime)
            oprot.writeFieldEnd()
        if self.epoch is not None:
            oprot.writeFieldBegin('epoch', TType.I64, 5)
            oprot.writeI64(self.epoch)
            oprot.writeFieldEnd()
        if self.sensorType is not None:
            oprot.writeFieldBegin('sensorType', TType.I32, 6)
            oprot.writeI32(self.sensorType)
            oprot.writeFieldEnd()
        if self.matchingType is not None:
            oprot.writeFieldBegin('matchingType', TType.I32, 7)
            oprot.writeI32(self.matchingType)
            oprot.writeFieldEnd()
        if self.queryVector is not None:
            oprot.writeFieldBegin('queryVector', TType.STRUCT, 8)
            self.queryVector.write(oprot)
            oprot.writeFieldEnd()
        if self.epsilon is not None:
            oprot.writeFieldBegin('epsilon', TType.DOUBLE, 9)
            oprot.writeDouble(self.epsilon)
            oprot.writeFieldEnd()
        if self.flipOne is not None:
            oprot.writeFieldBegin('flipOne', TType.STRING, 10)
            oprot.writeString(self.flipOne.encode('utf-8') if sys.version_info[0] == 2 else self.flipOne)
            oprot.writeFieldEnd()
        if self.flipTwo is not None:
            oprot.writeFieldBegin('flipTwo', TType.STRING, 11)
            oprot.writeString(self.flipTwo.encode('utf-8') if sys.version_info[0] == 2 else self.flipTwo)
            oprot.writeFieldEnd()
        if self.versionId is not None:
            oprot.writeFieldBegin('versionId', TType.I64, 12)
            oprot.writeI64(self.versionId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(QueryVector)
QueryVector.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'ranges', (TType.STRING, 'UTF8', False), None, ),  # 1
)
all_structs.append(Query)
Query.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'analystId', None, None, ),  # 1
    (2, TType.I64, 'queryId', None, None, ),  # 2
    (3, TType.I64, 'queryStartTime', None, None, ),  # 3
    (4, TType.I64, 'queryEndTime', None, None, ),  # 4
    (5, TType.I64, 'epoch', None, None, ),  # 5
    (6, TType.I32, 'sensorType', None, None, ),  # 6
    (7, TType.I32, 'matchingType', None, None, ),  # 7
    (8, TType.STRUCT, 'queryVector', [QueryVector, None], None, ),  # 8
    (9, TType.DOUBLE, 'epsilon', None, None, ),  # 9
    (10, TType.STRING, 'flipOne', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'flipTwo', 'UTF8', None, ),  # 11
    (12, TType.I64, 'versionId', None, None, ),  # 12
)
fix_spec(all_structs)
del all_structs
